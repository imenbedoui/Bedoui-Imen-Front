pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-cred'          
        SONARQUBE_SERVER = 'SonarQube'                       
        NEXUS_URL = 'http://nexus:8081/repository/raw-hosted'
        APP_NAME = 'frontend-kaddem2'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Clean dist') {
            steps {
                sh 'rm -rf dist'
            }
        }

        stage('Install dependencies') {
            steps {
                sh 'npm install --legacy-peer-deps'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build -- --configuration production'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    script {
                        def scannerHome = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        withSonarQubeEnv('SonarQube') {
                            sh """
                                export PATH=\$PATH:${scannerHome}/bin
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=front \
                                -Dsonar.sources=. \
                                -Dsonar.login=${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }

        stage('Publish to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh '''
                        which zip || (apt-get update && apt-get install zip -y)
                        zip -r frontend.zip dist/frontend-kaddem2
                        curl -v -u $NEXUS_USER:$NEXUS_PASS \
                            --upload-file frontend.zip \
                            $NEXUS_URL/frontend-kaddem2/frontend.zip
                    '''
                }
            }
        }

        stage('Build Docker image') {
            steps {
                script {
                    dockerImage = docker.build("imenbedoui/front:${IMAGE_TAG}", "--no-cache .")
                }
            }
        }

        stage('Push Docker image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        dockerImage.push()
                        dockerImage.push("latest") // Optional: also update `latest`
                    }
                }
            }
        }

        stage('Run Frontend, Backend and MySQL Containers') {
            steps {
                script {
                    // Create network if not exists
                    sh "docker network create devops-network || true"
        
                    // Pull backend image
                    sh "docker pull imenbedoui/spring-kaddem2:latest"
        
                    // Stop and remove old containers
                    sh "docker rm -f mysql backend frontend || true"
        
                    // Run MySQL
                    sh '''
                    docker run -d --name mysql --network devops-network \
                        -e MYSQL_ROOT_PASSWORD=rootpassword \
                        -e MYSQL_DATABASE=kaddem \
                        mysql:8
                    '''
        
                    // Wait for MySQL
                    sh '''
                    for i in $(seq 1 30); do
                        if docker exec mysql mysqladmin ping -uroot -prootpassword --silent; then
                            echo "MySQL is up!"
                            break
                        else
                            echo "Waiting for MySQL to start... ($i/30)"
                            sleep 3
                        fi
                    done
                    '''
        
                    // Run backend
                    sh '''
                    docker run -d --name backend --network devops-network \
                        -p 8089:8089 imenbedoui/spring-kaddem2:latest
                    '''
        
                    // Run frontend using unique tag
                    sh """
                    docker run -d --name frontend --network devops-network \
                        -p 4200:8080 imenbedoui/front:${IMAGE_TAG}
                    """
                }
            }
        }


    post {
        failure {
            mail to: 'nejdbedoui@gmail.com',
                 subject: "Angular Build Failed: ${env.JOB_NAME}",
                 body: "Check Jenkins for details: ${env.BUILD_URL}"
        }
    }
}
